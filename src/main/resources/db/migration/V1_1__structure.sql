USE PLA;

DROP TABLE IF EXISTS geo;
DROP TABLE IF EXISTS channel_type;
DROP TABLE IF EXISTS bank_name;
DROP TABLE IF EXISTS bank_branch;
DROP TABLE IF EXISTS hcp_service;
DROP TABLE IF EXISTS region;
/*
geo table stores the geographical mapping of the country
GEO_ID is a sequential number which refers to GEO_TYPE 
PARENT_GEO_ID points to its parent GEO_ID
GEO_TYPE will be the type of geographical mapping.
	possible values are provinces, city , suburb, zip code
GEO_DESCRIPTION is the name of the provinces , city , suburb or the zip code	

*/
CREATE TABLE geo (
  GEO_ID VARCHAR(20) NOT NULL,
  PARENT_GEO_ID VARCHAR(20),
  GEO_TYPE VARCHAR(20) NOT NULL,
  GEO_DESCRIPTION VARCHAR(100) NOT NULL,
  PRIMARY KEY(GEO_ID)
);

/*
channel_type stores the different type of channel from which a policy can be taken
CHANNEL_CODE is a sequential number
CHANNEL_DESCRIPTION is the string representation of channel type
*/
CREATE TABLE channel_type (
  CHANNEL_CODE VARCHAR(20),
  CHANNEL_DESCRIPTION VARCHAR(50) NOT NULL UNIQUE,
  PRIMARY KEY(CHANNEL_CODE)
);

/*
BANK_CODE a sequential number which references a bank name
BANK_NAME String representation of the bank name 
*/

CREATE TABLE bank_name (
  BANK_CODE VARCHAR(20),
  BANK_NAME VARCHAR(50) NOT NULL UNIQUE,
  PRIMARY KEY(BANK_CODE)
);

/*
BANK_CODE is the code which maps to a bank name
BRANCH is the branch to which the bank belongs to
SORT_CODE is a unique code assigned to each branch
*/
CREATE TABLE bank_branch (
  BANK_CODE VARCHAR(20) NOT NULL,
  BRANCH VARCHAR(100) NOT NULL,
  SORT_CODE VARCHAR(100),
  PRIMARY KEY(SORT_CODE),
   FOREIGN KEY (BANK_CODE)
	REFERENCES bank_name(BANK_CODE)
);

/*
hcp_service stores the values of the HEALTH CARE PROVIDERS
SERVICE_CODE code for each HCP
HCP_DESCRIPTION is the string representation of health care providers
HCP_TYPE is the type to which HCP providers belong to like Government Hospital, Private clinic 
All other fields are self descriptive
*/

CREATE TABLE hcp_service (
  HCP_SERVICE_CODE VARCHAR(20),
  HCP_DESCRIPTION VARCHAR(50) NOT NULL,
  HCP_TYPE VARCHAR(50) NOT NULL,
  ADDRESS VARCHAR(200),
  PROVINCE_GEO_ID VARCHAR(20) NOT NUll,
  TOWN_GEO_ID VARCHAR(20) NOT NULL,
  POSTAL_CODE_GEO_ID VARCHAR(20),
  WORK_PHONE BIGINT(13),
  EMAIL_ADDRESS VARCHAR(320),
  PRIMARY KEY(HCP_SERVICE_CODE),
  FOREIGN KEY (PROVINCE_GEO_ID)
	REFERENCES geo(GEO_ID),
  FOREIGN KEY (TOWN_GEO_ID)
	REFERENCES geo(GEO_ID)
);

/*
region stores the values of the region.This is used to during team and Branches configuration.
REGION_CODE code for the region
REGION is the name of the region
*/

CREATE TABLE region (
  REGION_CODE VARCHAR(20),
  REGION VARCHAR(12) NOT NULL UNIQUE,
  PRIMARY KEY(REGION_CODE)
);

#
# Quartz seems to work best with the driver mm.mysql-2.0.7-bin.jar
#
# PLEASE consider using mysql with innodb tables to avoid locking issues
#
# In your Quartz properties file, you'll need to set
# org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#

USE PLAJOBS;

DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;


CREATE TABLE QRTZ_JOB_DETAILS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    JOB_NAME  VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    JOB_CLASS_NAME   VARCHAR(250) NOT NULL,
    IS_DURABLE VARCHAR(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE QRTZ_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME  VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT(13) NULL,
    PREV_FIRE_TIME BIGINT(13) NULL,
    PRIORITY INTEGER NULL,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT(13) NOT NULL,
    END_TIME BIGINT(13) NULL,
    CALENDAR_NAME VARCHAR(200) NULL,
    MISFIRE_INSTR SMALLINT(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE QRTZ_SIMPLE_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT(7) NOT NULL,
    REPEAT_INTERVAL BIGINT(12) NOT NULL,
    TIMES_TRIGGERED BIGINT(10) NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CRON_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(200) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_SIMPROP_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1 VARCHAR(512) NULL,
    STR_PROP_2 VARCHAR(512) NULL,
    STR_PROP_3 VARCHAR(512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR(1) NULL,
    BOOL_PROP_2 VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_BLOB_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CALENDARS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    CALENDAR_NAME  VARCHAR(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
);

CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_GROUP  VARCHAR(200) NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_FIRED_TRIGGERS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT(13) NOT NULL,
    SCHED_TIME BIGINT(13) NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200) NULL,
    JOB_GROUP VARCHAR(200) NULL,
    IS_NONCONCURRENT VARCHAR(1) NULL,
    REQUESTS_RECOVERY VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,ENTRY_ID)
);

CREATE TABLE QRTZ_SCHEDULER_STATE
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
    CHECKIN_INTERVAL BIGINT(13) NOT NULL,
    PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
);

CREATE TABLE QRTZ_LOCKS
  (
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME  VARCHAR(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME,LOCK_NAME)
);


commit;

USE PLA;

DROP TABLE IF EXISTS coverage_benefit;
DROP TABLE IF EXISTS coverage;
DROP TABLE IF EXISTS benefit;
CREATE TABLE `benefit` (
  `benefit_id` varchar(255) NOT NULL,
  `status` varchar(255)  NOT NULL,
  `benefit_name` varchar(100)  NOT NULL,
  PRIMARY KEY (`benefit_id`),
  UNIQUE KEY `UNQ_BENEFIT_NAME` (`benefit_name`)
);

CREATE TABLE `coverage` (
  `coverage_id` varchar(255) NOT NULL,
  `coverage_name` varchar(50)  NOT NULL,
  `description` varchar(150) DEFAULT NULL,
  `status` varchar(255)  NOT NULL,
  PRIMARY KEY (`coverage_id`),
  UNIQUE KEY `UNQ_COVERAGE_NAME` (`coverage_name`)
);

CREATE TABLE `coverage_benefit` (
  `coverage_id` varchar(255) NOT NULL,
  `benefit_id` varchar(255) NOT NULL,
  UNIQUE KEY `UK_BENEFIT_ID` (`benefit_id`),
  KEY `FK_COVERAGE_ID` (`coverage_id`),
  CONSTRAINT `FK_COVERAGE_COVERAGE_ID` FOREIGN KEY (`coverage_id`) REFERENCES `coverage` (`coverage_id`),
  CONSTRAINT `FK_BENEFIT_BENEFIT_ID` FOREIGN KEY (`benefit_id`) REFERENCES `benefit` (`benefit_id`)
);

DROP TABLE IF EXISTS team_team_leader_fulfillment;
DROP TABLE IF EXISTS team;
CREATE TABLE `team` (
`team_id` varchar(255) NOT NULL,
`active` bit(1) DEFAULT NULL,
`current_team_leader` varchar(255) DEFAULT NULL,
`team_code` varchar(255) DEFAULT NULL,
`team_name` varchar(255) DEFAULT NULL,
PRIMARY KEY (`team_id`),
UNIQUE KEY `UNQ_TEAM_CODE_NAME` (`team_code`,`team_name`)
);
CREATE TABLE `team_team_leader_fulfillment` (
  `team_id` varchar(255) NOT NULL,
  `from_date` date DEFAULT NULL,
  `employee_id` varchar(255) DEFAULT NULL,
  `first_name` varchar(255) DEFAULT NULL,
  `last_name` varchar(255) DEFAULT NULL,
  `thru_date` date DEFAULT NULL,
  `team_leaders_order` int(11) NOT NULL,
  PRIMARY KEY (`team_id`,`team_leaders_order`),
  CONSTRAINT `FK_TEAM_LEADER_FULFILLMENT` FOREIGN KEY (`team_id`) REFERENCES `team` (`team_id`)
);